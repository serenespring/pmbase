var _excluded = ["tagName", "path"];

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import SVGContext from './context';
var DEFINE = 'defs';
var OMIT_SVG_ELEMENTS = ['title', 'desc', 'defs'];

function replaceColor(props, theme) {
  if (!theme) {
    return props;
  }

  var newProps = props;

  if (props.fill) {
    newProps = _objectSpread({}, newProps);
    newProps.fill = theme[props.fill] || props.fill;
  }

  return newProps;
}

function SVG(_ref) {
  var Component = _ref.tagName,
      path = _ref.path,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _React$useContext = React.useContext(SVGContext),
      chipManger = _React$useContext.chipManger,
      theme = _React$useContext.theme;

  var chip = chipManger.getChip(path); // Only create prop object when chip exist to save perf

  if (chip) {
    var props = {// TODO: Handle chip operation
    };
    return /*#__PURE__*/React.createElement(Component, _objectSpread(_objectSpread({}, replaceColor(rest, theme)), props));
  }

  return /*#__PURE__*/React.createElement(Component, _objectSpread({}, replaceColor(rest, theme)));
}

function toNumber(unit) {
  return Number(unit.replace(/[^\d.]/g, '')) || 0;
}

var uuid = 0;

function getUUID() {
  var rnd = "".concat(Math.random().toFixed(10)).replace('.', '');
  var id = "HITU_".concat(rnd, "_").concat(uuid);
  uuid += 1;
  return id;
}

function camelCase(str) {
  var out = '';

  for (var i = 0; i < str.length; i += 1) {
    var char = str[i];

    if (char === '-' || char === ':') {
      i += 1;
      var next = str[i];
      out += next.toUpperCase();
    } else {
      out += char;
    }
  }

  return out;
}

function getAttributes(dom) {
  var attributes = dom.attributes;
  var attrs = {};

  for (var i = 0; i < attributes.length; i += 1) {
    var attr = attributes[i];
    var name = camelCase(attr.name);
    attrs[name] = attr.value;
  }

  return attrs;
}

function getMatchId(txt) {
  var match = txt.match(/#([^)]+)/);
  return match && match[1];
}

SVG.parse = function (text) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      debug = _ref2.debug,
      name = _ref2.name,
      width = _ref2.width,
      height = _ref2.height;

  var id = name || getUUID();

  function getId(originId) {
    return "".concat(id, "_").concat(originId);
  } // Create environments


  var fragment = document.createDocumentFragment();
  var container = document.createElement('div');
  fragment.appendChild(container);
  container.innerHTML = text; // Fetch children & defines

  var svg = fragment.querySelector('svg');
  var defsEle = null;
  var defElements = [];
  var svgChildren = Array.from(svg.children).filter(function (node) {
    if (node.tagName === DEFINE) {
      defsEle = node;
    }

    return !OMIT_SVG_ELEMENTS.includes(node.tagName);
  }); // Convert svg defines

  if (defsEle) {
    Array.from(defsEle.children).forEach(function (def, index) {
      var attrs = getAttributes(def);
      attrs.id = getId(attrs.id);
      defElements.push( /*#__PURE__*/React.createElement(SVG, _objectSpread(_objectSpread({
        key: index
      }, attrs), {}, {
        tagName: def.tagName
      })));
    });
  } // Dig children


  function dig(children) {
    var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return children.map(function (node, index) {
      var tagName = node.tagName;
      var attrs = getAttributes(node);

      if (tagName === 'mask') {
        attrs.id = getId(node.id);
      } else if (tagName === 'use') {
        var matchId = getMatchId(attrs.xlinkHref);

        if (matchId) {
          attrs.xlinkHref = attrs.xlinkHref.replace(matchId, getId(matchId));
        }
      }

      if (attrs.mask) {
        var _matchId = getMatchId(attrs.mask);

        if (_matchId) {
          attrs.mask = attrs.mask.replace(_matchId, getId(_matchId));
        }
      }

      var myPath = [].concat(_toConsumableArray(parentPath), [index]);
      return /*#__PURE__*/React.createElement(SVG, _objectSpread(_objectSpread({}, attrs), {}, {
        tagName: tagName,
        key: index,
        path: myPath
      }), dig(Array.from(node.children), myPath));
    });
  }

  if (debug) {
    container.className = 'hitu-svg-debug';
    document.body.appendChild(fragment);
    window.HITU_SVG_DEBUG = svg;
  }

  var svgAttrs = getAttributes(svg);
  var svgWidth = width || toNumber(svgAttrs.width);
  var svgHeight = height || toNumber(svgAttrs.height);
  return /*#__PURE__*/React.createElement(SVG, _objectSpread(_objectSpread({
    viewBox: "0 0 ".concat(svgWidth, " ").concat(svgHeight)
  }, svgAttrs), {}, {
    width: svgWidth,
    height: svgHeight,
    tagName: "svg"
  }), [/*#__PURE__*/React.createElement("defs", {
    key: "defs"
  }, defElements)].concat(_toConsumableArray(dig(svgChildren))));
};

export default SVG;
export function getColors(text) {
  var colors = text.match(/#[a-fA-F\d]{6}/g) || [];
  return colors;
}