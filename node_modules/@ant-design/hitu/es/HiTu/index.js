var _excluded = ["type", "source"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { warning } from "rc-util/es/warning";
import { TYPE_SHAPE } from '../interface';
import SVG from '../SVG';
import useFramer from '../hooks/useFramer';
import { EASE, EASE_IN, EASE_IN_OUT, EASE_OUT } from '../utils/cubicUtil';
import Chip from './Chip';

var InternalHiTu = function InternalHiTu(_ref, ref) {
  var style = _ref.style,
      className = _ref.className,
      width = _ref.width,
      height = _ref.height,
      _ref$frames = _ref.frames,
      frames = _ref$frames === void 0 ? 0 : _ref$frames,
      _ref$shapes = _ref.shapes,
      shapes = _ref$shapes === void 0 ? [] : _ref$shapes,
      debug = _ref.debug,
      defaultPlay = _ref.defaultPlay,
      defaultFrame = _ref.defaultFrame,
      loop = _ref.loop,
      shapeRender = _ref.shapeRender,
      onPlay = _ref.onPlay,
      onFrame = _ref.onFrame;

  var _useFramer = useFramer(frames, {
    defaultPlay: defaultPlay,
    defaultFrame: defaultFrame,
    onPlay: onPlay,
    onFrame: onFrame,
    loop: loop
  }),
      frame = _useFramer.frame,
      triggerMotion = _useFramer.triggerMotion,
      getFrameInfo = _useFramer.getFrameInfo,
      getFramerInfo = _useFramer.getFramerInfo,
      setFrame = _useFramer.setFrame;

  React.useImperativeHandle(ref, function () {
    return {
      triggerMotion: triggerMotion,
      getFramerInfo: getFramerInfo,
      setFrame: setFrame
    };
  });
  return /*#__PURE__*/React.createElement("svg", {
    viewBox: "0 0 ".concat(width, " ").concat(height),
    className: className,
    style: style
  }, debug && /*#__PURE__*/React.createElement("rect", {
    x: "0",
    y: "0",
    width: width,
    height: height,
    stroke: "blue",
    fill: "transparent"
  }), shapes.map(function (shape, index) {
    var type = shape.type,
        Source = shape.source,
        restShapeInfo = _objectWithoutProperties(shape, _excluded);

    var shapeWidth = 0;
    var shapeHeight = 0;
    var frameInfo = getFrameInfo(restShapeInfo);
    var shapeEle = null;

    switch (type) {
      case 'shape':
        {
          shapeWidth = Source.width;
          shapeHeight = Source.height;
          shapeEle = /*#__PURE__*/React.createElement(Chip, _objectSpread(_objectSpread({
            frame: frame,
            key: index
          }, frameInfo), {}, {
            width: shapeWidth,
            height: shapeHeight
          }), /*#__PURE__*/React.createElement(Source, null));
          break;
        }

      case 'svgText':
        {
          // TODO: Performance improvement
          var chipEle = SVG.parse(Source);
          var _chipEle$props = chipEle.props;
          shapeWidth = _chipEle$props.width;
          shapeHeight = _chipEle$props.height;
          shapeEle = /*#__PURE__*/React.createElement(Chip, _objectSpread(_objectSpread({
            frame: frame,
            key: index
          }, frameInfo), {}, {
            width: shapeWidth,
            height: shapeHeight,
            chips: shape.chips
          }), chipEle);
          break;
        }

      default:
        warning(false, "type: '".concat(type, "' is not support."));
    }

    if (shapeRender) {
      return shapeRender(shapeEle, shape, frameInfo);
    }

    return shapeEle;
  }));
};

var HiTu = /*#__PURE__*/React.forwardRef(InternalHiTu);
var ExportHiTu = HiTu;
ExportHiTu.TYPE_SHAPE = TYPE_SHAPE;
ExportHiTu.CUBIC_EASE = EASE;
ExportHiTu.CUBIC_EASE_IN = EASE_IN;
ExportHiTu.CUBIC_EASE_IN_OUT = EASE_IN_OUT;
ExportHiTu.CUBIC_EASE_OUT = EASE_OUT;
export default ExportHiTu;