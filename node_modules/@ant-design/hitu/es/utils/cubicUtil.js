function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

export var EASE = [0.25, 0.1, 0.25, 1.0];
export var EASE_IN = [0.42, 0.0, 1.0, 1.0];
export var EASE_IN_OUT = [0.42, 0.0, 0.58, 1.0];
export var EASE_OUT = [0.0, 0.0, 0.58, 1.0];
/* eslint-disable no-underscore-dangle, no-mixed-operators */

var CubicBezier = /*#__PURE__*/function () {
  function CubicBezier(x1, y1, x2, y2) {
    _classCallCheck(this, CubicBezier);

    this.x1 = void 0;
    this.y1 = void 0;
    this.x2 = void 0;
    this.y2 = void 0;
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
  }
  /**
   *
   * @param t Range of 0 ~ 1
   */


  _createClass(CubicBezier, [{
    key: "getCoordinate",
    value: function getCoordinate(t) {
      var _t = 1 - t;

      var c1 = 3 * t * Math.pow(_t, 2);
      var c2 = 3 * _t * Math.pow(t, 2);
      var c3 = Math.pow(t, 3);
      var x = c1 * this.x1 + c2 * this.x2 + c3;
      var y = c1 * this.y1 + c2 * this.y2 + c3;
      return [x, y];
    }
  }, {
    key: "getTransition",
    value: function getTransition(targetX) {
      var start = [0, 0, 0];
      var end = [1, 1, 1];

      for (var i = 0; i < 10; i += 1) {
        var mid = (start[0] + end[0]) * 0.5;

        var _this$getCoordinate = this.getCoordinate(mid),
            _this$getCoordinate2 = _slicedToArray(_this$getCoordinate, 2),
            x = _this$getCoordinate2[0],
            y = _this$getCoordinate2[1];

        if (targetX < x) {
          end = [mid, x, y];
        } else {
          start = [mid, x, y];
        }
      }

      var ptg = (targetX - start[1]) / (end[1] - start[1]);
      return start[2] + ptg * (end[2] - start[2]);
    }
  }]);

  return CubicBezier;
}();

export { CubicBezier as default };